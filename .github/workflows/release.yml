name: Release new version of the portal
run-name: ${{ github.actor }} is releasing a new version
on:
  push:
    branches:
      - 'main'
      - 'dev'
jobs:
#  cleanup:
#    runs-on: [ self-hosted ]
#    container:
#      image: bitnami/git
#      volumes:
#        - /home/github-runner:/runner/_work/vlaams-biodiversiteitsportaal/
#    steps:
#      - name: cleanup
#        id: output
#        run: |
#          rm -rf -v ./*
#          rm -rf -v ./.git
#          rm -rf -v /home/github-runner/_work/vlaams-biodiversiteitsportaal/
#          rm -rf -v /runner/_work/vlaams-biodiversiteitsportaal/

  get-versions:
    runs-on: [ self-hosted ]
#    needs: cleanup
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get all component versions
        id: versions
        env:
          COMPONENTS: "alerts apikey"
        run: |
          # Branding
          COMPONENT=branding
          
          PATHS="./branding/**"    
          export $(bash <(curl -fsS "https://raw.githubusercontent.com/StefanVanDyck/git-semantic-version/refs/heads/main/version.sh") | xargs)

          if [ "${number_of_changes_since_last_tag}" != "0" ]; then
            echo "Setting new version for branding ${component} to ${new_version}"
            echo "branding_version=${new_version}" >> "$GITHUB_OUTPUT"
          fi
          
          # Services
          CONFIG_VERSIONS="{}"
          DOCKER_VERSIONS="{}"
          for component in ${COMPONENTS}; do
            COMPONENT=${component}
          
            PATHS="./config/common/**,./config/${component}/**"      
            export $(bash <(curl -fsS "https://raw.githubusercontent.com/StefanVanDyck/git-semantic-version/refs/heads/main/version.sh") | xargs)

            if [ "${number_of_changes_since_last_tag}" != "0" ]; then
              echo "Setting new version for config ${component} to ${new_version}"
              CONFIG_VERSIONS=$(jq -c ". += {\"${component}\": \"${new_version}\"}" <<< ${CONFIG_VERSIONS})
            fi
          
            PATHS="./docker/${component}/**"
            export $(bash <(curl -fsS "https://raw.githubusercontent.com/StefanVanDyck/git-semantic-version/refs/heads/main/version.sh") | xargs)

            if [ "${number_of_changes_since_last_tag}" != "0" ]; then
              echo "Setting new version for docker ${component} to ${new_version}"
              DOCKER_VERSIONS=$(jq -c ". += {\"${component}\": \"${new_version}\"}" <<< ${DOCKER_VERSIONS})
            fi
          done
          
          # Debug
          echo "config_versions=${CONFIG_VERSIONS}"
          echo "docker_versions=${DOCKER_VERSIONS}"
          
          echo "config_versions=${CONFIG_VERSIONS}" >> "$GITHUB_OUTPUT"
          echo "docker_versions=${DOCKER_VERSIONS}" >> "$GITHUB_OUTPUT"
    outputs:
      branding_version: ${{ steps.versions.outputs.branding_version }}
      config_versions: ${{ toJSON(steps.versions.outputs.config_versions) }}
      docker_versions: ${{ toJSON(steps.versions.outputs.docker_versions) }}

  build-and-release-branding:
    runs-on: [ self-hosted ]
    needs: get-versions
    if: ${{ needs.get-versions.outputs.branding_version != '' }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: branding/package-lock.json

      - name: Build branding website S3
        working-directory: ./branding
        run: |
          set -e
          
          cd commonui-bs3-2019
          npm install
          npx gulp build
          
          cd ..
          npm install
          npx brunch build --production
          tar -cvzf branding-${{ needs.get-versions.outputs.branding_version }}.tar.gz -C "$(pwd)/public" ./public

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.get-versions.outputs.branding_version }}
          release_name: Branding ${{ needs.get-versions.outputs.branding_version }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./branding/branding-${{ needs.get-versions.outputs.branding_version }}.tar.gz
          asset_name: branding-${{ needs.get-versions.outputs.branding_version }}.tar.gz
          asset_content_type: application/gzip

  build-and-push-docker-images:
    runs-on: [ self-hosted ]
    needs: get-versions
    if: ${{ needs.get-versions.outputs.docker_versions != '{}' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.DEV_DEPLOYMENT_ROLE_ARN }}

      - name: Docker login to Amazon ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin 632683202044.dkr.ecr.eu-west-1.amazonaws.com

#      - name: Pull docker build images
#        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
#        run: |
#          docker pull 632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/moby/buildkit:buildx-stable-1
#          docker pull 632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/tonistiigi/binfmt:latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
#        with:
#          driver-opts: |
#            image=632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/moby/buildkit:buildx-stable-1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
#        with:
#          image: 632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/tonistiigi/binfmt:latest

      - name: Cache
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            var-cache-apt
            var-lib-apt
            gradle-cache
            maven-cache
          key: cache-docker-${{ matrix.name }}-${{ hashFiles(format('docker/{0}/Dockerfile', matrix.name)) }}

      - name: inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "var-cache-apt": "/var/cache/apt",
              "var-lib-apt": "/var/lib/apt",
              "gradle-cache": "/gradle-cache",
              "maven-cache": "/root/.m2/repository"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Build and push docker images
        working-directory: ./docker
        run: |
          echo ${{ needs.get-versions.outputs.docker_versions }}
          
          for component_version in $(jq -c '. | to_entries | .[]' <<< "{\"alerts\":\"0.0.1\",\"apikey\":\"0.0.1\"}"); do
            echo "${component_version}"
            docker_name=$(jq -r '.key' <<< "${component_version}")
            version=$(jq -r '.value' <<< "${component_version}")
            echo " Releasing ${docker_name} version ${version}"
            TAG=${version} docker buildx bake --push ${docker_name} --set='*.args.BUILDPLATFORM=linux/arm64' --set='*.platform=linux/amd64,linux/arm64'
          done

      - name: Create tag
        uses: actions/github-script@v7
        with:
          script: |
            const versions = ${{ needs.get-versions.outputs.docker_versions }};
            for (const [component, version] of Object.entries(versions)) {
              github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/docker-${component}-v${version}`,
                sha: context.sha
              });
            }
  deploy:
    needs:
      - build-and-release-branding
      - build-and-push-docker-images
    runs-on: [ self-hosted ]
    steps:
      - name: Update versions in dev deployment
        run: |
          set -e -x
          git clone --branch=60-setup-deployment-pipeline git@github.com:inbo/inbo-aws-biodiversiteitsportaal-terraform.git
          
          if [ -z "${{ needs.get-versions.outputs.branding_version }}" ]; then
            cat region/inbo-dev/eu-west-1/versions.json | jq -c ". += {\"branding\": \"${{ needs.get-versions.outputs.branding_version }}\"}" > region/inbo-dev/eu-west-1/versions.json
          fi
          
          if [ -z "${{ needs.get-versions.outputs.config_versions }}" ]; then
            cat region/inbo-dev/eu-west-1/versions.json | jq -c ". += {\"config\": ${{ needs.get-versions.outputs.config_versions }}}" > region/inbo-dev/eu-west-1/versions.json
          fi
          
          if [ -z "${{ needs.get-versions.outputs.docker_versions }}" ]; then
            cat region/inbo-dev/eu-west-1/versions.json | jq -c ". += {\"docker\": ${{ needs.get-versions.outputs.docker_versions }}}" > region/inbo-dev/eu-west-1/versions.json
          fi
          
          git add region/inbo-dev/eu-west-1/versions.json
          git commit -m "Github actions: automated update of versions"
          git push