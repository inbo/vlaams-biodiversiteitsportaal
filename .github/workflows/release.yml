name: Release new version of the portal
run-name: ${{ github.actor }} is releasing a new version
on:
  push:
    branches:
      - 'main'
      - 'dev'

# Only allow one workflow to run at a time
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  get-versions:
    runs-on: [ self-hosted ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get all component versions
        id: versions
        env:
          CONFIG_COMPONENTS: "alerts apikey bie-hub bie-index biocache-hub biocache-service collectory doi-service grafana image-service logger namematching-service regions solr spatial-hub spatial-service species-list userdetails"
          DOCKER_COMPONENTS: "alerts apikey bie-hub bie-index biocache-hub biocache-service collectory doi-service image-service pipelines logger namematching-service regions spatial-hub spatial-service species-list userdetails"
        run: |
          # Branding
          export COMPONENT=branding
          
          export PATHS="./branding/**"    
          export $(bash <(curl -fsS "https://raw.githubusercontent.com/StefanVanDyck/git-semantic-version/refs/heads/main/version.sh") | xargs)

          if [ "${number_of_changes_since_last_tag}" != "0" ]; then
            echo "Setting new version for branding ${component} to ${new_version} with ${number_of_changes_since_last_tag} changes"
            echo "branding_version=${new_version}" >> "$GITHUB_OUTPUT"
          fi
          
          # Configs
          CONFIG_VERSIONS="{}"
          for component in ${CONFIG_COMPONENTS}; do
            export COMPONENT=config-${component}
            export PATHS="./config/common/** ./config/${component}/**"      
            export $(bash <(curl -fsS "https://raw.githubusercontent.com/StefanVanDyck/git-semantic-version/refs/heads/main/version.sh") | xargs)

            if [ "${number_of_changes_since_last_tag}" != "0" ]; then
              echo "Setting new version for config ${component} to ${new_version} with ${number_of_changes_since_last_tag} changes"
              CONFIG_VERSIONS=$(jq -c ". += {\"${component}\": \"${new_version}\"}" <<< ${CONFIG_VERSIONS})
            fi
          done
          echo "config_versions=${CONFIG_VERSIONS}" >> "$GITHUB_OUTPUT"
          
          # Docker images
          DOCKER_VERSIONS="{}"
          for component in ${DOCKER_COMPONENTS}; do          
            export COMPONENT=docker-${component}
            export PATHS="./docker/docker-bake.hcl ./docker/tomcat/** ./docker/${component}/**"
            export $(bash <(curl -fsS "https://raw.githubusercontent.com/StefanVanDyck/git-semantic-version/refs/heads/main/version.sh") | xargs)

            if [ "${number_of_changes_since_last_tag}" != "0" ]; then
              echo "Setting new version for docker ${component} to ${new_version} with ${number_of_changes_since_last_tag} changes"
              DOCKER_VERSIONS=$(jq -c ". += {\"${component}\": \"${new_version}\"}" <<< ${DOCKER_VERSIONS})
            fi
          done
          echo "docker_versions=${DOCKER_VERSIONS}" >> "$GITHUB_OUTPUT"

    outputs:
      branding_version: ${{ steps.versions.outputs.branding_version }}
      config_versions: ${{ toJSON(steps.versions.outputs.config_versions) }}
      docker_versions: ${{ toJSON(steps.versions.outputs.docker_versions) }}

  build-and-release-branding:
    runs-on: [ self-hosted ]
    needs: get-versions
    if: needs.get-versions.outputs.branding_version != ''
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: branding/package-lock.json

      - name: Build branding website S3
        working-directory: ./branding
        run: |
          set -e
          
          cd commonui-bs3-2019
          npm install
          npx gulp build
          
          cd ..
          npm install
          npx brunch build --production
          tar -cvzf branding-${{ needs.get-versions.outputs.branding_version }}.tar.gz -C "$(pwd)/public" ./


      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          commit: ${{ github.sha }}
          tag: branding-v${{ needs.get-versions.outputs.branding_version }}
          artifacts: "branding/branding-${{ needs.get-versions.outputs.branding_version }}.tar.gz"

  version-config-files:
    runs-on: [ self-hosted ]
    needs: get-versions
    if: fromJSON(needs.get-versions.outputs.config_versions) != '{}'
    steps:
      - name: Create tags
        uses: actions/github-script@v7
        with:
          script: |
            const versions = ${{ fromJSON(needs.get-versions.outputs.config_versions) }};
            console.log(versions);
            for (const [component, version] of Object.entries(versions)) {
              github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/config-${component}-v${version}`,
                sha: context.sha
              })
            }

  build-and-push-docker-images:
    runs-on: [ self-hosted ]
    needs: get-versions
    if: fromJSON(needs.get-versions.outputs.docker_versions) != '{}'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.DEV_DEPLOYMENT_ROLE_ARN }}

      - name: Docker login to Amazon ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin 632683202044.dkr.ecr.eu-west-1.amazonaws.com

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/moby/buildkit:buildx-stable-1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: 632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/tonistiigi/binfmt:latest

      - name: Cache
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            var-cache-apt
            var-lib-apt
            gradle-cache
            maven-cache
          key: cache-docker

      - name: inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "var-cache-apt": "/var/cache/apt",
              "var-lib-apt": "/var/lib/apt",
              "gradle-cache": "/gradle-cache",
              "maven-cache": "/root/.m2/repository"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Build and push docker images
        working-directory: ./docker
        run: |
          set -e -o pipefail

          for component_version in $(jq -c '. | to_entries | .[]' <<< ${{ needs.get-versions.outputs.docker_versions }}); do
            docker_name=$(jq -r '.key' <<< "${component_version}")
            version=$(jq -r '.value' <<< "${component_version}")
            echo " Releasing ${docker_name} version ${version}"
            export TAG=${version} 
            export GIT_TAG="docker-${docker_name}-v${version}"
          
            # Build and push a single image
            docker buildx bake --push \
              ${docker_name} \
              --set="*.args.BUILDPLATFORM=linux/arm64" \
              --set="*.platform=linux/amd64,linux/arm64" \
              --set="*.labels.maintainer=support.natuurdata@inbo.be" \
              --set="*.labels.build_date=$(date +'%Y-%m-%dT%H:%M:%S')" \
              --set="*.labels.build_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
              --set="*.labels.git_tag=${GIT_TAG}" \
              --set="*.labels.git_hash=${{ github.sha }}" \
              --set="*.labels.version=${version}" \
              --set="custom-gradle.cache-to=type=s3,region=eu-west-1,bucket=biodiversiteitsportaal-docker-build-cache,name=custom-gradle,mode=max" \
              --set="custom-gradle.cache-from=type=s3,region=eu-west-1,bucket=biodiversiteitsportaal-docker-build-cache,name=custom-gradle" \
              --set="custom-maven.cache-to=type=s3,region=eu-west-1,bucket=biodiversiteitsportaal-docker-build-cache,name=custom-maven,mode=max" \
              --set="custom-maven.cache-from=type=s3,region=eu-west-1,bucket=biodiversiteitsportaal-docker-build-cache,name=custom-maven" \
              --set="tomcat-base.cache-to=type=s3,region=eu-west-1,bucket=biodiversiteitsportaal-docker-build-cache,name=tomcat-base,mode=max" \
              --set="tomcat-base.cache-from=type=s3,region=eu-west-1,bucket=biodiversiteitsportaal-docker-build-cache,name=tomcat-base" \
              --set="${docker_name}.cache-to=type=s3,region=eu-west-1,bucket=biodiversiteitsportaal-docker-build-cache,name=${docker_name},mode=max" \
              --set="${docker_name}.cache-from=type=s3,region=eu-west-1,bucket=biodiversiteitsportaal-docker-build-cache,name=${docker_name}"
          
            # Create Git Tag
            echo "Creating Git Tag: ${GIT_TAG}"
            git tag "${GIT_TAG}"
            git push origin "${GIT_TAG}"
          done

  deploy:
    needs:
      - build-and-release-branding
      - version-config-files
      - build-and-push-docker-images
    runs-on: [ self-hosted ]
    permissions:
      contents: write
    steps:
      - name: Checkout terraform repository
        uses: actions/checkout@v4
        with:
          repository: 'inbo/inbo-aws-biodiversiteitsportaal-terraform'
          ref: 'automated-version-update'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update versions in dev deployment
        run: |
          set -e -x
          
          if [ -z "${{ needs.get-versions.outputs.branding_version }}" ]; then
            cat region/inbo-dev/eu-west-1/versions.json | jq -c ". += {\"branding\": \"${{ needs.get-versions.outputs.branding_version }}\"}" > region/inbo-dev/eu-west-1/versions.json
          fi
          
          if [ -z "${{ needs.get-versions.outputs.config_versions }}" ]; then
            cat region/inbo-dev/eu-west-1/versions.json | jq -c ". += {\"config\": ${{ needs.get-versions.outputs.config_versions }}}" > region/inbo-dev/eu-west-1/versions.json
          fi
          
          if [ -z "${{ needs.get-versions.outputs.docker_versions }}" ]; then
            cat region/inbo-dev/eu-west-1/versions.json | jq -c ". += {\"docker\": ${{ needs.get-versions.outputs.docker_versions }}}" > region/inbo-dev/eu-west-1/versions.json
          fi
          
          git add region/inbo-dev/eu-west-1/versions.json
          git commit -m "Github actions: automated update of versions"
          git push