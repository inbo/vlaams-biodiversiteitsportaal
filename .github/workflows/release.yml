name: Release new version of the portal
run-name: ${{ github.actor }} is releasing a new version
on:
  push:
    branches:
      - 'main'
      - 'dev'
jobs:
  get-next-version:
    # runs-on: [ self-hosted ] # does not support arm64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Git Version
        id: version
        uses: codacy/git-version@2.7.1
        with:
          release-branch: main
          dev-branch: dev
    outputs:
      version: ${{ steps.version.outputs.version }}

  upload-branding-to-s3:
    needs: get-next-version
    runs-on: [ self-hosted ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: branding/package-lock.json

      - name: Build branding website S3
        working-directory: ./branding
        env:
          VERSION: ${{needs.get-next-version.outputs.version}}
          AWS_S3_BUCKET: biodiversiteitsportaal-dev-branding
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          npm install && ./deploy-to-s3.sh

  build-and-push-docker-images:
    needs: get-next-version
    runs-on: [ self-hosted ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 1

      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_SHARED_INFRA_ROLE_ARN }}
      - name: Docker login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Cache
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            var-cache-apt
            var-lib-apt
            gradle-cache
            maven-cache
          key: cache-${{ hashFiles('docker/**/Dockerfile') }}

      - name: inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "var-cache-apt": "/var/cache/apt",
              "var-lib-apt": "/var/lib/apt",
              "gradle-cache": "/gradle-cache",
              "maven-cache": "/root/.m2/repository"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Build and push docker images
        working-directory: ./docker
        env:
          TAG: ${{needs.get-next-version.outputs.version}}
#        run: |
#          docker buildx bake --push all --set='*.args.BUILDPLATFORM=linux/arm64' --set='*.platform=linux/amd64,linux/arm64'
        run: |
          docker buildx bake --load all --set='*.args.BUILDPLATFORM=linux/arm64' --set='*.platform=linux/arm64'

  release:
    needs:
      - get-next-version
      - upload-branding-to-s3
      - build-and-push-docker-images
    runs-on: [ self-hosted ]
    steps:
      - name: Create tag
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{needs.get-next-version.outputs.version}}',
              sha: context.sha
            })
