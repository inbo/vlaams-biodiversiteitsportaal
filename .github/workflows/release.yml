name: Release new version of the portal
run-name: ${{ github.actor }} is releasing a new version
on:
  push:
    branches:
      - 'main'
      - 'dev'
jobs:
#  cleanup:
#    runs-on: [ stefan ]
#    container:
#      image: bitnami/git
#      volumes:
#        - /home/github-runner:/runner/_work/vlaams-biodiversiteitsportaal/
#    steps:
#      - name: cleanup
#        id: output
#        run: |
#          rm -rf -v ./*
#          rm -rf -v ./.git
#          rm -rf -v /home/github-runner/_work/vlaams-biodiversiteitsportaal/
#          rm -rf -v /runner/_work/vlaams-biodiversiteitsportaal/

  get_versions:
    runs-on: [ stefan ]
#    needs: cleanup
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate output
        id: output
        env:
          COMPONENTS: "alerts"
        run: |
          for component in ${COMPONENTS}; do
            export COMPONENT=${component}
          
            export $(bash <(curl -fsS "https://raw.githubusercontent.com/StefanVanDyck/git-semantic-version/refs/heads/main/version.sh") | xargs)
            echo "$component"
            echo "$number_of_changes_since_last_tag"
            echo "$previous_version"
            echo "$new_version"
          
            if [ "${$number_of_changes_since_last_tag}" != "0" ]; then
              echo "Setting new version for config ${{ matrix.name }} to ${{ steps.config-version.outputs.new_version }}"
              echo "config_${{ matrix.name }}=${{ steps.config-version.outputs.new_version }}" >> "$GITHUB_OUTPUT"
            fi
          done

  upload-branding-to-s3:
    runs-on: [ stefan ]
    needs: get_versions
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: branding/package-lock.json

      - name: Build branding website S3
        working-directory: ./branding
        env:
          VERSION: ${{needs.get-next-version.outputs.version}}
          AWS_S3_BUCKET: biodiversiteitsportaal-dev-branding
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          npm install && ./deploy-to-s3.sh

  build-and-push-docker-images:
    runs-on: [ stefan ]
    needs: get_versions
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get version info
        id: version
        uses: StefanVanDyck/git-semantic-version@main
        with:
          component: ${{ matrix.name }}
          paths: ./docker/${{ matrix.name }}

      - name: Login to AWS
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::632683202044:role/inbo-developers-role

      - name: Docker login to Amazon ECR
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin 632683202044.dkr.ecr.eu-west-1.amazonaws.com

#      - name: Pull docker build images
#        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
#        run: |
#          docker pull 632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/moby/buildkit:buildx-stable-1
#          docker pull 632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/tonistiigi/binfmt:latest

      - name: Set up Docker Buildx
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/moby/buildkit:buildx-stable-1
      - name: Set up QEMU
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        uses: docker/setup-qemu-action@v3
#        with:
#          image: 632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/tonistiigi/binfmt:latest

      - name: Cache
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            var-cache-apt
            var-lib-apt
            gradle-cache
            maven-cache
          key: cache-docker-${{ matrix.name }}-${{ hashFiles(format('docker/{0}/Dockerfile', matrix.name)) }}

      - name: inject cache into docker
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "var-cache-apt": "/var/cache/apt",
              "var-lib-apt": "/var/lib/apt",
              "gradle-cache": "/gradle-cache",
              "maven-cache": "/root/.m2/repository"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Build and push docker images
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        working-directory: ./docker
        env:
          TAG: ${{ steps.version.outputs.new_version }}
        #        run: |
        #          docker buildx bake --push ${{ name }} --set='*.args.BUILDPLATFORM=linux/arm64' --set='*.platform=linux/amd64,linux/arm64'
        run: |
          docker_versions=$(echo "${{ needs.get_versions.outputs }}" | grep "docker_")
          for dv in ${docker_versions}; do
            echo "${dv}"
            docker_name=$(echo $dv | cut -d'=' -f1 | cut -d'_' -f2)
            version=$(echo $dv | cut -d'=' -f2)
            echo "${docker_name}"
            echo "${version}"
            docker buildx bake --push ${docker_name} --set='*.args.BUILDPLATFORM=linux/arm64' --set='*.platform=linux/amd64,linux/arm64'
          done

      - name: Create tag
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/docker-${{matrix.name}}-v${{ steps.version.outputs.new_version }}',
              sha: context.sha
            })

  deploy:
    needs:
      - upload-branding-to-s3
      - build-and-push-docker-images
    runs-on: [ stefan ]
    steps:
      - name: Create tag
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{needs.get-next-version.outputs.version}}',
              sha: context.sha
            })
