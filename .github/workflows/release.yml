name: Release new version of the portal
run-name: ${{ github.actor }} is releasing a new version
on:
  push:
    branches:
      - 'main'
      - 'dev'
jobs:
  get-next-versions:
    # runs-on: [ self-hosted ] # does not support arm64
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        name:
#          - "alerts"
#          - "apikey"
#          - "bie-hub"
#          - "bie-index"
#          - "biocache-hub"
#          - "biocache-service"
#          - "collectory"
#          - "doi-service"
#          - "image-service"
#          - "logger"
#          - "namematching-service"
#          - "pipelines"
#          - "regions"
#          - "spatial-hub"
#          - "spatial-service"
#          - "species-list"
#          - "userdetails"
          - "portal-full"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git Version
        id: config_version
        uses: codacy/git-version@2.7.1
        with:
          release-branch: main
          dev-branch: dev
          prefix: config-${{ matrix.name }}-v
          log-paths: ./config/${{ matrix.name }}

      - name: Git Version
        id: docker_version
        uses: codacy/git-version@2.7.1
        with:
          release-branch: main
          dev-branch: dev
          prefix: docker-${{ matrix.name }}-v
          log-paths: ./docker/${{ matrix.name }}

      - name: Generate output
        id: gen_output
        run: |
          echo "config_version_${{matrix.name}}=${{ steps.config_version.outputs.version }}" >> "$GITHUB_OUTPUT"
          echo "docker_version_${{matrix.name}}=${{ steps.docker_version.outputs.version }}" >> "$GITHUB_OUTPUT"

    outputs:
      alerts_config: ${{steps.gen_output.config_version_alerts}}
      alerts_docker: ${{steps.gen_output.docker_version_alerts}}
      apikey_config: ${{steps.gen_output.config_version_apikey}}
      apikey_docker: ${{steps.gen_output.docker_version_apikey}}
      bie-hub_config: ${{steps.gen_output.config_version_bie-hub}}
      bie-hub_docker: ${{steps.gen_output.docker_version_bie-hub}}
      bie-index_config: ${{steps.gen_output.config_version_bie-index}}
      bie-index_docker: ${{steps.gen_output.docker_version_bie-index}}
      biocache-hub_config: ${{steps.gen_output.config_version_biocache-hub}}
      biocache-hub_docker: ${{steps.gen_output.docker_version_biocache-hub}}
      biocache-service_config: ${{steps.gen_output.config_version_biocache-service}}
      biocache-service_docker: ${{steps.gen_output.docker_version_biocache-service}}
      collectory_config: ${{steps.gen_output.config_version_collectory}}
      collectory_docker: ${{steps.gen_output.docker_version_collectory}}
      doi-service_config: ${{steps.gen_output.config_version_doi-service}}
      doi-service_docker: ${{steps.gen_output.docker_version_doi-service}}
      image-service_config: ${{steps.gen_output.config_version_image-service}}
      image-service_docker: ${{steps.gen_output.docker_version_image-service}}
      logger_config: ${{steps.gen_output.config_version_logger}}
      logger_docker: ${{steps.gen_output.docker_version_logger}}
      namematching-service_config: ${{steps.gen_output.config_version_namematching-service}}
      namematching-service_docker: ${{steps.gen_output.docker_version_namematching-service}}
      pipelines_config: ${{steps.gen_output.config_version_pipelines}}
      pipelines_docker: ${{steps.gen_output.docker_version_pipelines}}
      regions_config: ${{steps.gen_output.config_version_regions}}
      regions_docker: ${{steps.gen_output.docker_version_regions}}
      spatial-hub_config: ${{steps.gen_output.config_version_spatial-hub}}
      spatial-hub_docker: ${{steps.gen_output.docker_version_spatial-hub}}
      spatial-service_config: ${{steps.gen_output.config_version_spatial-service}}
      spatial-service_docker: ${{steps.gen_output.docker_version_spatial-service}}
      species-list_config: ${{steps.gen_output.config_version_species-list}}
      species-list_docker: ${{steps.gen_output.docker_version_species-list}}
      userdetails_config: ${{steps.gen_output.config_version_userdetails}}
      userdetails_docker: ${{steps.gen_output.docker_version_userdetails}}
      portal-full_config: ${{steps.gen_output.config_version_portal-full}}
      portal-full_docker: ${{steps.gen_output.docker_version_portal-full}}

  upload-branding-to-s3:
    runs-on: [ self-hosted ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: branding/package-lock.json

      - name: Build branding website S3
        working-directory: ./branding
        env:
          VERSION: ${{needs.get-next-version.outputs.version}}
          AWS_S3_BUCKET: biodiversiteitsportaal-dev-branding
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          npm install && ./deploy-to-s3.sh

  build-and-push-docker-images:
    runs-on: [ self-hosted ]
    needs: get-next-versions
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        name:
#          - "alerts"
#          - "apikey"
#          - "bie-hub"
#          - "bie-index"
#          - "biocache-hub"
#          - "biocache-service"
#          - "collectory"
#          - "doi-service"
#          - "image-service"
#          - "logger"
#          - "namematching-service"
#          - "pipelines"
#          - "regions"
#          - "spatial-hub"
#          - "spatial-service"
#          - "species-list"
#          - "userdetails"
          - "portal-full"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_SHARED_INFRA_ROLE_ARN }}
      - name: Docker login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Cache
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            var-cache-apt
            var-lib-apt
            gradle-cache
            maven-cache
          key: cache-docker-${{ matrix.name }}-${{ hashFiles(format('docker/{0}/Dockerfile', matrix.name)) }}

      - name: inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "var-cache-apt": "/var/cache/apt",
              "var-lib-apt": "/var/lib/apt",
              "gradle-cache": "/gradle-cache",
              "maven-cache": "/root/.m2/repository"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Build and push docker images
        working-directory: ./docker
        env:
          TAG: ${{ needs.get-next-version.outputs[format('{0}_docker_version', matrix.name)] }}
        #        run: |
        #          docker buildx bake --push ${{ name }} --set='*.args.BUILDPLATFORM=linux/arm64' --set='*.platform=linux/amd64,linux/arm64'
        run: |
          docker buildx bake --load ${{ matrix.name }} --set='*.args.BUILDPLATFORM=linux/arm64' --set='*.platform=linux/arm64'


      - name: Create tag
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/docker-${{matrix.name}}-v${{ needs.get-next-version.outputs[format('{0}_docker_version', matrix.name)] }}',
              sha: context.sha
            })

#  release:
#    needs:
#      - get-next-version
#      - upload-branding-to-s3
#      - build-and-push-docker-images
#    runs-on: [ self-hosted ]
#    steps:
#      - name: Create tag
#        uses: actions/github-script@v5
#        with:
#          script: |
#            github.rest.git.createRef({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              ref: 'refs/tags/${{needs.get-next-version.outputs.version}}',
#              sha: context.sha
#            })
