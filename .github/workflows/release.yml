name: Release new version of the portal
run-name: ${{ github.actor }} is releasing a new version
on:
  push:
    branches:
      - 'main'
      - 'dev'
jobs:
  get_versions:
    runs-on: [ self-hosted ]
    container:
      image: bitnami/git
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        name:
          - "alerts"
          - "apikey"
          - "bie-hub"
          - "bie-index"
          - "biocache-hub"
          - "biocache-service"
          - "collectory"
          - "doi-service"
          - "image-service"
          - "logger"
          - "namematching-service"
          - "pipelines"
          - "regions"
          - "spatial-hub"
          - "spatial-service"
          - "species-list"
          - "userdetails"
          - "portal-full"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fix safe dir
        run: |
          git config --global --add safe.directory '*'1
      - name: Get docker version
        id: config-version
        uses: StefanVanDyck/git-semantic-version@main
        with:
          component: ${{ matrix.name }}
          paths: ./config/${{ matrix.name }}
      - name: Get config version
        id: docker-version
        uses: StefanVanDyck/git-semantic-version@main
        with:
          component: ${{ matrix.name }}
          paths: ./docker/${{ matrix.name }}

      - name: Generate output
        id: output
        run: |
          # Debug
          echo "config_${{ matrix.name }}=${{ steps.config-version.outputs.new_version }}"
          echo "docker_${{ matrix.name }}=${{ steps.docker-version.outputs.new_version }}"
          
          echo "$GITHUB_OUTPUT" 
          
          echo "$GITHUB_OUTPUT" | jq '.config.${{ matrix.name }} = "${{ steps.config-version.outputs.new_version }}"' >> "$GITHUB_OUTPUT"
          echo "$GITHUB_OUTPUT" | jq '.docker.${{ matrix.name }} = "${{ steps.docker-version.outputs.new_version }}"' >> "$GITHUB_OUTPUT"
          
          echo "$GITHUB_OUTPUT"

  upload-branding-to-s3:
    runs-on: [ self-hosted ]
    needs: get_versions
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: branding/package-lock.json

      - name: Build branding website S3
        working-directory: ./branding
        env:
          VERSION: ${{needs.get-next-version.outputs.version}}
          AWS_S3_BUCKET: biodiversiteitsportaal-dev-branding
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          npm install && ./deploy-to-s3.sh

  build-and-push-docker-images:
    runs-on: [ self-hosted ]
    needs: get_versions
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get version info
        id: version
        uses: StefanVanDyck/git-semantic-version@main
        with:
          component: ${{ matrix.name }}
          paths: ./docker/${{ matrix.name }}

      - name: Login to AWS
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_SHARED_INFRA_ROLE_ARN }}

      - name: Docker login to Amazon ECR
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin 632683202044.dkr.ecr.eu-west-1.amazonaws.com

#      - name: Pull docker build images
#        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
#        run: |
#          docker pull 632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/moby/buildkit:buildx-stable-1
#          docker pull 632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/tonistiigi/binfmt:latest

      - name: Set up Docker Buildx
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/moby/buildkit:buildx-stable-1
      - name: Set up QEMU
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        uses: docker/setup-qemu-action@v3
#        with:
#          image: 632683202044.dkr.ecr.eu-west-1.amazonaws.com/docker-hub/tonistiigi/binfmt:latest

      - name: Cache
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            var-cache-apt
            var-lib-apt
            gradle-cache
            maven-cache
          key: cache-docker-${{ matrix.name }}-${{ hashFiles(format('docker/{0}/Dockerfile', matrix.name)) }}

      - name: inject cache into docker
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "var-cache-apt": "/var/cache/apt",
              "var-lib-apt": "/var/lib/apt",
              "gradle-cache": "/gradle-cache",
              "maven-cache": "/root/.m2/repository"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Build and push docker images
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        working-directory: ./docker
        env:
          TAG: ${{ steps.version.outputs.new_version }}
        #        run: |
        #          docker buildx bake --push ${{ name }} --set='*.args.BUILDPLATFORM=linux/arm64' --set='*.platform=linux/amd64,linux/arm64'
        run: |
          docker buildx bake --push ${{ matrix.name }} --set='*.args.BUILDPLATFORM=linux/arm64' --set='*.platform=linux/amd64,linux/arm64'

      - name: Create tag
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/docker-${{matrix.name}}-v${{ steps.version.outputs.new_version }}',
              sha: context.sha
            })
      - name: Generate output
        id: output
        run: |
          echo "${{ matrix.name }}=${{ steps.version.outputs.new_version }}" >> "$GITHUB_OUTPUT"

    outputs:
      version_docker_alerts: ${{ steps.output.outputs.alerts }}
      version_docker_apikey: ${{ steps.output.outputs.apikey }}
      version_docker_bie-hub: ${{ steps.output.outputs.bie-hub }}
      version_docker_bie-index: ${{ steps.output.outputs.bie-index }}
      version_docker_biocache-hub: ${{ steps.output.outputs.biocache-hub }}
      version_docker_biocache-service: ${{ steps.output.outputs.biocache-service }}
      version_docker_collectory: ${{ steps.output.outputs.collectory }}
      version_docker_doi-service: ${{ steps.output.outputs.doi-service }}
      version_docker_image-service: ${{ steps.output.outputs.image-service }}
      version_docker_logger: ${{ steps.output.outputs.logger }}
      version_docker_namematching-service: ${{ steps.output.outputs.namematching-service }}
      version_docker_pipelines: ${{ steps.output.outputs.pipelines }}
      version_docker_regions: ${{ steps.output.outputs.regions }}
      version_docker_spatial-hub: ${{ steps.output.outputs.spatial-hub }}
      version_docker_spatial-service: ${{ steps.output.outputs.spatial-service }}
      version_docker_species-list: ${{ steps.output.outputs.species-list }}
      version_docker_userdetails: ${{ steps.output.outputs.userdetails }}
      version_docker_portal-full: ${{ steps.output.outputs.portal-full }}

  version-config:
    runs-on: [ self-hosted ]
    needs: get_versions
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get version info
        id: version
        uses: StefanVanDyck/git-semantic-version@main
        with:
          component: ${{ matrix.name }}
          paths: ./config/${{ matrix.name }}
      - name: Create tag
        if: ${{ steps.version.outputs.number_of_changes_since_last_tag != '0' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/docker-${{matrix.name}}-v${{ steps.version.outputs.new_version }}',
              sha: context.sha
            })
      - name: Generate output
        id: output
        run: |
          echo "${{ matrix.name }}=${{ steps.version.outputs.new_version }}" >> "$GITHUB_OUTPUT"
    outputs:
      version_config_alerts: ${{ steps.output.outputs.alerts }}
      version_config_apikey: ${{ steps.output.outputs.apikey }}
      version_config_bie-hub: ${{ steps.output.outputs.bie-hub }}
      version_config_bie-index: ${{ steps.output.outputs.bie-index }}
      version_config_biocache-hub: ${{ steps.output.outputs.biocache-hub }}
      version_config_biocache-service: ${{ steps.output.outputs.biocache-service }}
      version_config_collectory: ${{ steps.output.outputs.collectory }}
      version_config_doi-service: ${{ steps.output.outputs.doi-service }}
      version_config_image-service: ${{ steps.output.outputs.image-service }}
      version_config_logger: ${{ steps.output.outputs.logger }}
      version_config_namematching-service: ${{ steps.output.outputs.namematching-service }}
      version_config_pipelines: ${{ steps.output.outputs.pipelines }}
      version_config_regions: ${{ steps.output.outputs.regions }}
      version_config_spatial-hub: ${{ steps.output.outputs.spatial-hub }}
      version_config_spatial-service: ${{ steps.output.outputs.spatial-service }}
      version_config_species-list: ${{ steps.output.outputs.species-list }}
      version_config_userdetails: ${{ steps.output.outputs.userdetails }}
      version_config_portal-full: ${{ steps.output.outputs.portal-full }}

  deploy:
    needs:
      - upload-branding-to-s3
      - build-and-push-docker-images
    runs-on: [ self-hosted ]
    steps:
      - name: Create tag
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{needs.get-next-version.outputs.version}}',
              sha: context.sha
            })
