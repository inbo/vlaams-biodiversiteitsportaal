services:
  collections:
    build: collections
    ports:
      - "8001:8080"
    volumes:
      - ./collections/config:/data/collectory/config
      - ./collections/taxa:/data/collectory/taxa
    depends_on:
      - mysql
      - cas

  species:
    build: species
    ports:
      - "8002:8080"
    volumes:
      - ./species/config:/data/specieslist-webapp/config/
    depends_on:
      - mysql
      - cas

  biocache:
    build: biocache
    ports:
      - "8003:8080"
    volumes:
      - ./biocache/config:/data/biocache/config/

  regions:
    build: regions
    ports:
      - "8005:8080"
    volumes:
      - ./regions/config:/data/regions/config/
    depends_on:
      - mysql
      - cas
      - spatial

  spatial:
    build: spatial
    ports:
      - "8006:8080"
    volumes:
      - ./spatial/config:/data/spatial-service/config/
      - spatial-data:/data/spatial-data
    depends_on:
      - postgis

  cas:
    build: cas
    ports:
      - "9000:9000"
    volumes:
      - cas-shared-conf:/etc/cas
      - cas-data:/data/cas
      - ./cas/config:/etc/cas/config:ro
    environment:
      ALA_PASSWORD_PROPERTIES: /etc/cas/config/pwe.properties
    depends_on:
      - mysql
      - mongodb

  cas-management:
    build: cas-management
    ports:
      - "8070:8070"
      - "8443:8443"
    volumes:
      # - ./cas/config:/data/cas/config:ro
      - cas-shared-conf:/etc/cas
      - cas-data:/data/cas
      - ./cas/config:/etc/cas/config:ro
      - ./cas-management/config:/data/cas-management/config:ro
      - ./cas-management/keystore/cas.crt:/etc/cas/cas.crt:ro
      - ./cas-management/keystore/thekeystore:/etc/cas/thekeystore:ro
      - ./cas-management/services-repo:/data/cas-management/services-repo
    depends_on:
      - mysql
      - cas

  cas-apikey:
    build: cas-apikey
    ports:
      - "9003:9003"
    volumes:
      # - ./cas/config:/data/cas/config:ro
      - ./cas-apikey/keystore:/etc/cas:ro
      - ./cas-apikey/config:/data/apikey/config:ro
    depends_on:
      - mysql
      - cas

  userdetails:
    build: userdetails
    ports:
      - "9001:9001"
    volumes:
      - ./userdetails/config:/data/userdetails/config
    depends_on:
      - mysql
      - cas

  postgis:
    image: postgis/postgis:16-3.4-alpine
    ports:
      - 5432:5432
    volumes:
      - ./db-init/postgis:/docker-entrypoint-initdb.d
      - postgis:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=my-super-secret-password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres


  geoserver:
    # image: kartoza/geoserver:2.23.2
    build:
      context: ./spatial/geoserver
    volumes:
      #geoserver data folder
      # - ./spatial/geoserver/geoserver-files:/data/geoserver-files/
      #Spatials service data folder. If they are both in the same machine, some layers are not needed to be uploaded.
      - spatial-data:/data/spatial-data
    ports:
      - "8079:8080"
    environment:
      JAVA_OPTS: -Xmx2g -Xms128m -Xss512k -Djava.awt.headless=true
      #Geoserver
      GEOSERVER_ADMIN_USER: admin
      GEOSERVER_ADMIN_PASSWORD: geoserver
      #If you want to create a user/password
      #NEW_USER: true
      USERNAME: admin
      PASS: my-super-secret-password
      #Geoserver internal server url. It is used to run a local script to init geoserver
      GEOSERVER_URL: http://localhost:8080/geoserver

      GEOSERVER_DATA_DIR: /data/geoserver_data_dir
      GEOWEBCACHE_CACHE_DIR: /data/geoserver_data_dir/gwc
      GEOSERVER_LOG_LOCATION: /data/geoserver_data_dir/logs/geoserver.log
      FOOTPRINTS_DATA_DIR: /data/geoserver_data_dir/footprints_dir
      RELINQUISH_LOG4J_CONTROL: true
      ENABLE_JSONP: true
      MAX_FILTER_RULES: 20
      OPTIMIZE_LINE_WIDTH: false

  mysql:
    image: mysql
    # NOTE: use of "mysql_native_password" is not recommended: https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password
    # (this is just an example, not intended to be a production configuration)
    # command: --default-authentication-plugin=mysql_native_password
    ports:
      - 3306:3306
    volumes:
      - ./db-init/mysql:/docker-entrypoint-initdb.d
      - mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: my-super-secret-password

  mongodb:
    image: mongo
    volumes:
      - ./db-init/mongo:/docker-entrypoint-initdb.d
      - mongo:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: my-super-secret-password


  cassandradb:
    image: cassandra
    volumes:
      - cassandra:/var/lib/cassandra

  solr:
    image: solr
    ports:
    - "8983:8983"
    volumes:
      - solr:/var/solr
    networks:
      default:
        aliases: 
          - index.la-flanders.org


  postfix:
    image: ghusta/fakesmtp:2.5
    ports:
    - "25:25"
    volumes:
      - /tmp/fakemail:/var/mail
    networks:
      default:
        aliases:
          - mail.la-flanders.org

  nginx:
    image: nginx
    volumes:
    - ./nginx/conf.d:/etc/nginx/conf.d
    - ../generated/la-flanders-branding/public:/srv/branding.la-flanders.org/www/
    ports:
    - "80:80"
    environment:
      NGINX_HOST: la-flanders.org
      NGINX_PORT: 80
    networks:
      default:
        aliases: 
          - auth.la-flanders.org
          - branding.la-flanders.org
          - collections.la-flanders.org
          - images.la-flanders.org
          - lists.la-flanders.org
          - logger.la-flanders.org
          - records-ws.la-flanders.org
          - records.la-flanders.org
          - regions.la-flanders.org
          - spatial.la-flanders.org
          - species-ws.la-flanders.org
          - species.la-flanders.org

networks:
  default:

volumes:
  spatial-data:
  cassandra:
  mysql:
  mongo:
  postgis:
  solr:
  cas-data:
  cas-shared-conf:
