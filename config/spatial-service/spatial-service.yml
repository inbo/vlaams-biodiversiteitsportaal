---
### OIDC Credentials ###
security:
  jwt:
    clientId: spatial_service
  oidc:
    clientId: spatial_service
    secret: spatial_service-oidc-super-secret
webservice:
  client-id: spatial_service
  client-secret: xxx

grails:
  serverURL: ${common.protocol}://${common.domain}/spatial-service
google:
  apikey: 'AIzaSyAJDtEeoy7Sc9pij2TAoVnmTwA34Q-2VHk'

api_key: xxxxxxxxxxxxx
spatialHubUrl: ${common.protocol}://${common.domain}/spatial-hub/

#distributions:
#  geoserver:
#    image:
#      url: "/ALF/wms?service=WMS&version=1.1.0&request=GetMap&layers=ALF%3ABehGebAkkervogel&styles=&bbox=2.52%2C50.64%2C5.94%2C51.51&srs=EPSG:4326&format=image/png&width=400&height=400&viewparams=s:"
#

geoserver:
  url: '${common.protocol}://${common.domain}/geoserver'
  username: 'admin'
  password: 'geoserver'
  canDeploy: true

  spatialservice:
    #if colocated, geoserver will load data from spatial service data folder, /data/spatial-data by default
    colocated: true # problematic with permissions and stuff
  remote:
    #In some cases, geoserver need to know its data folder.
    geoserver_data_dir: "/data/geoserver_data_dir"

dataSource:
  driverClassName: org.postgresql.Driver
  dialect: org.hibernate.spatial.dialect.postgis.PostgisPG9Dialect
  url: 'jdbc:postgresql://postgis:5432/layersdb'
  username: 'spatial'
  password: 'my-super-secret-password'
  pooled: true
  jmxExport: true
  dbCreate: update
  properties:
    jmxEnabled: true
    initialSize: 5
    maxActive: 50
    minIdle: 5
    maxIdle: 25
    maxWait: 10000
    maxAge: 600000
    timeBetweenEvictionRunsMillis: 5000
    minEvictableIdleTimeMillis: 60000
    validationQuery: SELECT 1
    validationQueryTimeout: 3
    validationInterval: 15000
    testOnBorrow: true
    testWhileIdle: true
    testOnReturn: false
    jdbcInterceptors: ConnectionState
    defaultTransactionIsolation: 2 # TRANSACTION_READ_COMMITTED

batch_sampling_passwords: ""

ala.baseURL: '${common.protocol}://${common.domain}'
bie.baseURL: '${common.protocol}://bie.${common.domain}'
bie.searchPath: '/search'

namematching.url: http://namematching.biodiversiteitsportaal.dev.internal:9180

records.url: '${common.protocol}://archives.${common.domain}/archives/exports/lat_lon_taxon.zip'

lists.url: '${common.protocol}://${common.domain}/species-list'
collections.url: '${common.protocol}://${common.domain}/collectory'
phyloServiceUrl: '${common.protocol}://phylolink.${common.domain}'

# au.org.ala.spatial.process config
spatialService.url: "${common.protocol}://${common.domain}/spatial-service"
shp2pgsql.path: "/usr/bin/shp2pgsql"
gdal.dir: "/usr/bin/"

slaveKey: "xxxxxxxxxxxxxx"
serviceKey: "xxxxxxxxxxxxxx"

layers_store:
  GEONETWORK_URL: '${common.protocol}://${common.domain}/spatial-hub/geonetwork'
  LAYER_INDEX_URL: ${common.protocol}://${common.domain}/spatial-hub/layers-service

apiKeyCheckUrlTemplate: '${common.protocol}://${common.domain}/apikey/ws/check?apikey={0}'
spatialService:
  remote: "${common.protocol}://${common.domain}/spatial-service"

management:
  endpoint:
    health:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health

useFixedLocale: en

sandboxEnabled: true
sandboxSolrUrl: http://solr.vbp.internal:8983
sandboxSolrCollection: sandbox
sandboxThreadCount: 2
pipelinesCmd: "java -Dspark.local.dir=/data/spatial-data/sandbox/tmp -Djava.io.tmpdir=/data/spatial-data/sandbox/tmp -cp /pipelines.jar"
pipelinesConfig: "--config=/config/config/spatial-service/la-pipelines.yaml"

logging:
  config: /config/config/spatial-service/logback.xml