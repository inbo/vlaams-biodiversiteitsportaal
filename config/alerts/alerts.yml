---
# mail.enabled: true will send email via a mail server depending on the mail.ses.enabled

# Set mail.ses.enabled true will use AWS SES, it requires the AWS credentials to be set in the environment variables
# Set false will use the default grails mail plugin, we need to config the mail server and port in grails.mail
# In dev, email will be posted to Postie docker container, which can be accessed via http://localhost:3000

mail:
    enabled: true
    ses:
        enabled: true
    details:
        sender: "alerts@${common.domain}"
        alertAddressTitle: "Atlas alerts"
        infoSender: "alerts@${common.domain}"
        infoAddressTitle: "Atlas of Living Australia"
        defaultResourceName: "Atlas of Living Australia"
        # forceAllAlertsGetSent results in emails getting sent regardless if data has changed - only use in DEV env
        forceAllAlertsGetSent: false

grails:
    #default mail service
    mail:
        port: 2525
        server: localhost

skin:
    layout: "ala-main"
    orgSupportEmail: support@${common.domain}
privacyPolicy: "https://www.${common.domain}/terms-of-use/privacy-policy/"
siteDefaultLanguage: "nl"

ala:
    baseURL: "${common.protocol}://www.${common.domain}"
    userDetailsURL: "${common.protocol}://auth.${common.domain}/userdetails/userDetails/getUserListFull"
biocacheService:
    baseURL: "https://records-ws.${common.domain}"
biocache:
    baseURL: "https://records.${common.domain}"
spatial:
    baseURL: "https://spatial.${common.domain}"
collectory:
    baseURL: "https://collections.${common.domain}"
lists:
    baseURL: "https://lists.${common.domain}"
speciesPages:
    searchURL: "https://species.${common.domain}/species/Tiliqua+rugosa"
    searchTitle: Shingle-back
collection:
    searchURL: "https://collections.${common.domain}/public/show/co13"
    searchTitle: ANIC
regions:
    searchURL: "https://regions.${common.domain}/states/Australian+Capital+Territory"
    searchTitle: ACT
occurrence:
    searchURL: "https://records.${common.domain}/occurrences/search?q=passer"
    searchTitle: occurrence search

useSpeciesListsAlerts: true
useSpatialAlerts: true
useBlogsAlerts: true
useCitizenScienceAlerts: true
biosecurity:
    cronExpression: '0 30 9 ? * WED'
    query:
        template:
            authoritativeList: /occurrences/search?q=species_list_uid:___LISTIDPARAM___&fq=decade:2020&fq=country:Australia&fq=first_loaded_date:[___DATEPARAM___%20TO%20*]&fq=occurrence_date:[___LASTYEARPARAM___%20TO%20*]&sort=first_loaded_date&dir=desc&disableAllQualityFilters=true
            nonAuthoritativeList: /occurrences/search?q=species_list:___LISTIDPARAM___&fq=decade:2020&fq=country:Australia&fq=first_loaded_date:[___DATEPARAM___%20TO%20*]&fq=occurrence_date:[___LASTYEARPARAM___%20TO%20*]&sort=first_loaded_date&dir=desc&disableAllQualityFilters=true
        maxRecords: 500
    moreinfo:
        link: https://www.${common.domain}/blogs-news/ala-helps-to-stop-pests-in-their-tracks/
    csv:
        local:
            enabled: true
            directory: /data/alerts/csv
        s3:
            enabled: false
            bucket: alerts
        # read lga from the layer
        lga: LGA2023

    legacy:
        aus: cl927:*
        act: cl927:"Australian Capital Territory" OR cl927:"Jervis Bay Territory"
        sa: cl927:"South Australia (including Coastal Waters)"
        vic: cl927:"Victoria (including Coastal Waters)"
        wa: cl927:"Western Australia (including Coastal Waters)"
        nt: cl927:"Northern Territory (including Coastal Waters)"
        qld: cl927:"Queensland (including Coastal Waters)"
        tas: cl927:"Tasmania (including Coastal Waters)"
        nsw: cl927:"New South Wales (including Coastal Waters)"
        lgaField: cl10923
        shape: cl11033:"Namadgi" OR cl11033:"Tidbinbilla" OR cl11033:"Bimberi"
        #shape: spatialObject:9223660
        eventDateAge: 150
        firstLoadedDateAge: 8

#environments:
#    development:
#        grails:
#            serverURL: "http://localhost:8080"
#            mail:
#                host: "localhost"
#                port: 1025
#                #username: postie.emailSender
#        security:
#            cas:
#                appServerName: "http://localhost:8080"
#        quartz:
#            autoStartup : false
#        biosecurity:
#            csv:
#                local:
#                    enabled: true
#        userdetails:
#            web:
#                url: https://aws-auth-test-2023.test.${common.domain}/userdetails/
#            api:
#                url: https://api.test.${common.domain}/userdetails/cognito/
#        mail:
#            details:
#                sender: "alerts-test@${common.domain}"
#                alertAddressTitle: "Atlas alerts [Dev]"
#                infoAddressTitle: "Atlas of Living Australia [Dev]"
#                infoSender: "alerts-test@${common.domain}"
#    test:
#        grails:
#            serverURL: "http://dev.${common.domain}:8080"
#            mail:
#                host: "localhost"
#                port: 25
#        security:
#            cas:
#                appServerName: "https://auth.${common.domain}"
#        userdetails:
#            web:
#                url: https://aws-auth-test-2023.test.${common.domain}/userdetails/
#            api:
#                url: https://api.test.${common.domain}/userdetails/cognito/
#        mail:
#            details:
#                sender: "alerts-test@${common.domain}"
#                alertAddressTitle: "Atlas alerts [Test]"
#                infoAddressTitle: "Atlas of Living Australia [Test]"
#                infoSender: "alerts-test@${common.domain}"
#    production:
#        grails:
#            serverURL: "https://auth.${common.domain}/alerts"
#            mail:
#                host: "localhost"
#                port: 25
#        security:
#            cas:
#                appServerName: "https://auth.${common.domain}"
#        userdetails:
#            web:
#                url: https://auth.${common.domain}/userdetails/
#            api:
#                url: https://api.${common.domain}/userdetails/cognito/
#
#---
#hibernate:
#    show_sql: false
#    cache:
#        queries: false
#        use_second_level_cache: true
#        use_query_cache: true
#        region:
#            factory_class: org.hibernate.cache.jcache.internal.JCacheRegionFactory
#
#dataSource:
#    pooled: true
#    jmxExport: true
#    driverClassName: com.mysql.jdbc.Driver
#    username:
#    password:
#    properties:
#        # http://www.grails.org/doc/latest/guide/single.html#dataSource
#        # see http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html#Common_Attributes for more
#        timeBetweenEvictionRunsMillis: 60000 # milliseconds (default: 5000)
#        testOnBorrow: true # default: false
#        testOnReturn: false # default: false
#        testWhileIdle: true # default: false
#        validationQuery: "SELECT 1" # default: null
#        validationQueryTimeout: 10 # seconds (default: -1 i.e. disabled)
#        validationInterval: 30000 # milliseconds, default is 30000 (30 seconds)
#        removeAbandoned: true # # default: false
#        removeAbandonedTimeout: 3600 # seconds (default: 60), must be > quartz job duration
#        logAbandoned: true # adds some overhead to every borrow from the pool, disable if it becomes a performance issue
#        logValidationErrors: true # default: false, logs validation errors at SEVERE
#        # NOTE: removeAbandoned: true OR testWhileIdle: true enables the Pool Cleaner. There is a bug with the
#        # pool cleaner which causes deadlocks when using older mysql jdbc drivers. This configuration has been
#        # tested successfully with mysql:mysql-connector-java:5.1.34.
#        # mysql jdbc connection properties - see http://dev.mysql.com/doc/connector-j/en/connector-j-reference-configuration-properties.html
#        dbProperties:
#            autoReconnect: true
#            connectTimeout: 0
#            useUnicode: true
#            characterEncoding: "UTF-8"
#
#environments:
#    development:
#        dataSource:
#            dbCreate: update
#            driverClassName: com.mysql.jdbc.Driver
#            url: jdbc:mysql://localhost/alerts
#            username: alerts_user
#            password: password
#    test:
#        dataSource:
#            dbCreate: update
#            pooled: true
#            jmxExport: true
#            driverClassName: org.h2.Driver
#            username: sa
#            password:
#            url: jdbc:h2:mem:testDb;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE
#        userDetails:
#            url: https://aws-auth-test-2023.test.${common.domain}/userdetails/
#    production:
#        dataSource:
#            dbCreate: update
#
#myannotation:
#    enabled: false
#
#webservice:
#    jwt: true
#    jwt-scopes: "openid users/read"
#
#
#
#security:
#    cas:
#        enabled: false
#    oidc:
#        enabled: true
#        discoveryUri: https://cognito-idp.ap-southeast-2.amazonaws.com/ap-southeast-2_8pKx9BtGz/.well-known/openid-configuration
#        scope: openid,profile,email,ala,roles
#    # this config is used to check incoming requests to protected APIs (methods protected with @RequireApiKey()) for JWT token in the expected header i.e. "Authorization". `fallbackToLegacyBehaviour` determines whether to check for the legacy API key when JWT is not detected/valid.
#    jwt:
#        discoveryUri: https://cognito-idp.ap-southeast-2.amazonaws.com/ap-southeast-2_8pKx9BtGz/.well-known/openid-configuration
#        enabled: true
#        fallbackToLegacyBehaviour: true
#    apikey:
#        enabled: true
#        auth:
#            serviceUrl: https://auth-test.${common.domain}/apikey/ws/check/
#        check:
#            serviceUrl: https://auth-test.${common.domain}/apikey/ws/check?apikey=
#        userdetails:
#            serviceUrl: https://auth-test.${common.domain}/userdetails/userDetails/
