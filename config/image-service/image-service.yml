---
grails:
  serverURL: 'http://dev.ala.org.au:8080'
security:
  oidc:
    enabled: true
    scope: openid profile email ala roles
    allowUnsignedIdTokens: true # Disable once CAS no longer suggests the none algorithm
    clientId: collections
    discoveryUri: ${common.protocol}://auth.${common.domain}/cas/oidc/.well-known
    secret: images-oidc-super-secret
  jwt:
    enabled: true # default for backwards compat with v1
    fallbackToLegacyKeys: true # Reset to false once legacy api keys no longer supported
    discoveryUri: ${security.oidc.discoveryUri}
  apikey:
    auth:
      serviceUrl: ${common.protocol}://auth.${common.domain}/apikey/

imageservice:
  imagestore:
    root: '/data/image-service/store'
    inbox: '/data/image-service/incoming'
    staging: '/data/image-service/store/staging'
  batchUpload: '/data/image-service/upload'
  exportDir: '/data/image-service/exports'
  apache:
    root: '${grails.serverURL}${grails.contextPath}/store/'
    # space separated list
    multiple_roots: '${grails.serverURL}${grails.contextPath}/store/'
  thumbnail:
    size: 300

serverName: '${common.protocol}://images.${common.domain}'

skin:
  layout: 'ala-main'
  fluidLayout: true


facets: [ "recognisedLicence", "dataResourceUid", "creator.keyword", "imageSize", "fileType", "format", "dateUploadedYearMonth" ]

elasticsearch:
  indexName: "images"
  maxFacetSize: 10000
  maxOffset: 10000
  maxPageSize: 200
  defaultPageSize: 10
  batchIndexSize: 1000
  hosts:
      - host: "elasticsearch"
        scheme: "http"
        port: 9200

# The URLs to recognise as image service URL for the purposes of recognising incoming
# URLs for images (to avoid re-downloading the images)
imageServiceUrls: [ "${common.protocol}://images.${common.domain}","http://images.biodiversiteitsportaal.dev.internal" ]

# External links
collectory:
  baseURL: "${common.protocol}://collections.${common.domain}"
biocache:
  baseURL: "${common.protocol}://biocache.${common.domain}"
